plugins {
	id "fabric-loom" version "1.6-SNAPSHOT"
}

sourceSets {
    main {
        resources {
            srcDirs += ['src/main/generated']
        }
    }

    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    accessWidenerPath = file("src/main/resources/neoskies.accesswidener")

    runs {
        datagenServer {
            server()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=neoskies"

            ideConfigGenerated = true
            runDir "build/datagen"
        }

        testmodServer {
            server()
            name = "Testmod Server"
            source sourceSets.testmod
        }
    }
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
	maven { url "https://maven.nucleoid.xyz" }
	maven { url "https://maven.awakenedredstone.com" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven { url "https://maven.ladysnake.org/releases" }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://jitpack.io" }
}

dependencies {
    //region Fabric
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api}"
    //endregion
    // region Cardinal Components
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-api:${project.cardinal_components_api}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cardinal_components_api}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-world:${project.cardinal_components_api}"
    // endregion
    // region Nucleoid
    modImplementation include("xyz.nucleoid:fantasy:${project.fantasy}")
    modImplementation include("xyz.nucleoid:stimuli:${project.stimuli}")
    modImplementation include("xyz.nucleoid:server-translations-api:${project.server_translations_api}")
    //endregion
    // region Patbox
    modImplementation include("eu.pb4:sgui:${project.server_gui}")
    modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api}")
    modImplementation include("eu.pb4:common-economy-api:${project.common_economy_api}")
    modImplementation include("eu.pb4:common-protection-api:${project.common_protection_api}")
    //region Polymer
    modImplementation include("eu.pb4:polymer-core:${project.polymer}")
    modImplementation include("eu.pb4:polymer-resource-pack:${project.polymer}")
    modImplementation include("eu.pb4:polymer-virtual-entity:${project.polymer}")
    //endregion
    //endregion
    // region Others
    modImplementation include("me.lucko:fabric-permissions-api:${project.fabric_permission_api}")
    //endregion
    // region Non mod dependencies
    include api("blue.endless:jankson:${project.jankson_version}")
    //endregion

    // region Tests
    testmodImplementation sourceSets.main.output
    //endregion
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
    //noinspection GroovyAssignabilityCheck
    it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}
